{"/home/travis/build/npmtest/node-npmtest-gulp-cssimport/test.js":"/* istanbul instrument in package npmtest_gulp_cssimport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cssimport/lib.npmtest_gulp_cssimport.js":"/* istanbul instrument in package npmtest_gulp_cssimport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_cssimport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_cssimport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cssimport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-cssimport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_cssimport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_cssimport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_cssimport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_cssimport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_cssimport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_cssimport.__dirname + '/lib.npmtest_gulp_cssimport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-cssimport/node_modules/gulp-cssimport/gulp-cssimport.js":"\"use strict\";\nvar through = require(\"through2\");\nvar path = require(\"path\");\nvar deepExtend = require(\"deep-extend\");\nvar fs = require(\"fs\");\nvar pify = require(\"pify\");\nvar gutil = require(\"gulp-util\");\nvar collect = require(\"collect-stream\");\nvar hh = require(\"http-https\");\nvar minimatch = require(\"minimatch\");\nvar applySourceMap = require(\"vinyl-sourcemaps-apply\");\nvar MagicString = require(\"magic-string\");\nvar lookupPath = require(\"lookup-path\");\n\nvar PLUGIN_NAME = \"gulp-cssimport\";\nvar readFile = pify(fs.readFile);\nvar trim = require(\"lodash.trim\");\nvar format = require(\"util\").format;\n\nvar defaults = {\n\tskipComments: true,\n\textensions: null,\n\tincludePaths: [],\n\tfilter: null,\n\tmatchPattern: null,\n\tmatchOptions: {\n\t\tmatchBase: true\n\t},\n\tlimit: 5000\n};\n\nmodule.exports = function cssImport(options) {\n\n\toptions = deepExtend({}, defaults, options || {});\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\toptions.extensions = options.extensions.toString().split(\",\").map(function (x) {\n\t\t\treturn x.trim();\n\t\t});\n\t}\n\t\n\tvar stream;\n\tvar cssCount = 0;\n\t\n\tfunction fileContents(vinyl, encoding, callback) {\n\n\t\tif (!stream) {\n\t\t\tstream = this;\n\t\t}\n\t\t// https://github.com/kevva/import-regex/\n\t\tvar regex = '(?:@import)(?:\\\\s)(?:url)?(?:(?:(?:\\\\()([\"\\'])?(?:[^\"\\')]+)\\\\1(?:\\\\))|([\"\\'])(?:.+)\\\\2)(?:[A-Z\\\\s])*)+(?:;)'; // eslint-disable-line\n\t\tvar importRe = new RegExp(regex, \"gi\");\n\t\tvar match;\n\t\tvar file = [];\n\t\tvar lastpos = 0;\n\t\tvar promises = [];\n\t\tvar contents = vinyl.contents.toString();\n\t\twhile ((match = importRe.exec(contents)) !== null) {\n\t\t\tif (options.skipComments) {\n\t\t\t\tvar matchIndex = match.index;\n\t\t\t\t// Check comment symbols 1.\n\t\t\t\tvar startCommentPosition = contents.lastIndexOf('/*', matchIndex);\n\t\t\t\tvar endCommentPosition = contents.lastIndexOf('*/', matchIndex);\n\t\t\t\tif (!(endCommentPosition > startCommentPosition) && startCommentPosition !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Check comment symbols 2.\n\t\t\t\tvar startCommentPosition2 = contents.lastIndexOf('//', matchIndex);\n\t\t\t\tvar endCommentPosition2 = contents.lastIndexOf('\\n', matchIndex);\n\t\t\t\tif (startCommentPosition2 > endCommentPosition2 && startCommentPosition2 !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar match2 = /@import\\s+(?:url\\()?(.+(?=['\"\\)]))(?:\\))?.*/ig.exec(match[0]);\n\t\t\tvar importPath = trim(match2[1], \"'\\\"\");\n\t\t\tif (!isMatch(importPath, options)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfile[file.length] = contents.slice(lastpos, match.index);\n\t\t\tvar index = file.length;\n\t\t\tfile[index] = format(\"importing file %s from %s\", importPath, vinyl.relative);\n\t\t\tlastpos = importRe.lastIndex;\n\t\t\t// Start resolving.\n\t\t\tif (++cssCount > options.limit) {\n\t\t\t\tstream.emit(\"error\", new Error(\"Exceed limit. Recursive include?\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t(function(index) {\n\t\t\t\tvar result = {index: index, importPath: importPath};\n\t\t\t\tif (!isUrl(importPath)) {\n\t\t\t\t\tvar pathDirectory = path.dirname(vinyl.path);\n\t\t\t\t\tvar importFile = resolveImportFile(pathDirectory, importPath, options.includePaths);\n\t\t\t\t\tif (!importFile) {\n\t\t\t\t\t\tvar err = new Error(\"Cannot find file '\" + importPath + \"' from '\" + pathDirectory + \"' (includePaths: \" + options.includePaths + \")\");\n\t\t\t\t\t\tcallback(new gutil.PluginError(PLUGIN_NAME, err));\n\t\t\t\t\t}\n\t\t\t\t\tpromises.push(readFile(importFile, \"utf8\").then(function(contents) {\n\t\t\t\t\t\tresult.importFile = importFile;\n\t\t\t\t\t\tresult.contents = contents;\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tpromises[promises.length] = new Promise(function(resolve, reject) {\n\t\t\t\t\t\tvar req = hh.request(importPath, function (res) {\n\t\t\t\t\t\t\tcollect(res, function (err, data) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult.contents = data.toString();\n\t\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\treq.on(\"error\", reject);\n\t\t\t\t\t\treq.end();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(index);\n\t\t}\n\t\t// Nothing to import.\n\t\tif (promises.length === 0) {\n\t\t\tcallback(null, vinyl);\n\t\t\treturn;\n\t\t}\n\t\t// Adding trailing piece.\n\t\tfile[file.length] = contents.slice(lastpos);\n\t\t// Waiting promises.\n\t\tPromise.all(promises).then(function(results) {\n\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\tvar result = results[i];\n\t\t\t\tvar vfile = new gutil.File({\n\t\t\t\t\tpath: result.importFile,\n\t\t\t\t\tcontents: new Buffer(result.contents)\n\t\t\t\t});\n\t\t\t\t(function(result) {\n\t\t\t\t\tresults[i] = pify(fileContents)(vfile, null).then(function(vfile) {\n\t\t\t\t\t\tresult.contents = vfile.contents.toString();\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t});\n\t\t\t\t})(result);\n\t\t\t}\n\t\t\treturn Promise.all(results);\n\t\t})\n\t\t.then(function(results) {\n\t\t\tvar iterator = function() {};\n\t\t\tif (vinyl.sourceMap) {\n\t\t\t\tvar bundle = new MagicString.Bundle();\n\t\t\t\titerator = function(file, result) {\n\t\t\t\t\tbundle.addSource({\n\t\t\t\t\t\tfilename: result.importPath,\n\t\t\t\t\t\tcontent: new MagicString(result.contents)\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\tvar result = results[i];\n\t\t\t\tvar index = result.index;\n\t\t\t\tvar contents = result.contents;\n\t\t\t\tfile[index] = contents;\n\t\t\t\titerator(file, result);\n\t\t\t}\n\t\t\tvinyl.contents = new Buffer(file.join(\"\"));\n\t\t\tif (vinyl.sourceMap) {\n\t\t\t\tvar map = bundle.generateMap({\n\t\t\t\t\tfile: vinyl.relative,\n\t\t\t\t\tincludeContent: true,\n\t\t\t\t\thires: true\n\t\t\t\t});\n\t\t\t\tapplySourceMap(vinyl, map);\n\t\t\t}\n\t\t\tcallback(null, vinyl);\n\t\t})\n\t\t.catch(function(err) {\n\t\t\tcallback(new gutil.PluginError(PLUGIN_NAME, err));\n\t\t});\n\t}\n\n\treturn through.obj(fileContents);\n};\n\nfunction resolveImportFile(pathDirectory, importPath, includePaths) {\n\tvar result = lookupPath(importPath, pathDirectory);\n\tif (result) {\n\t\treturn result;\n\t}\n\tfor (var i = 0; i < includePaths.length; i++) {\n\t\tvar includePath = includePaths[i];\n\t\t\n\t\tvar d1 = path.resolve(pathDirectory, includePath);\n\t\tif (d1 === pathDirectory) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult = lookupPath(importPath, d1);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tvar d2 = path.resolve(includePath);\n\t\tif (d2 === d1) {\n\t\t\tcontinue;\n\t\t}\n\t\tresult = lookupPath(importPath, d2);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction isMatch(path, options) {\n\tif (!options) {\n\t\treturn true;\n\t}\n\tif (!path) {\n\t\treturn false;\n\t}\n\toptions = options || {};\n\tvar result;\n\tif (options.filter instanceof RegExp) {\n\t\tvar filter = options.filter;\n\t\tfilter.lastIndex = 0;\n\t\tresult = filter.test(path);\n\t}\n\tif (options.matchPattern && !isUrl(path)) {\n\t\tvar matchPattern = options.matchPattern;\n\t\tresult = minimatch(path, matchPattern, options.matchOptions);\n\t}\n\tif (options.extensions) {\n\t\tvar extensions = options.extensions;\n\t\tvar fileExt = getExtension(path);\n\t\tfor (var k = 0; k < extensions.length; k++) {\n\t\t\tvar extension = extensions[k];\n\t\t\tvar isInverse = extension.charAt(0) === \"!\";\n\t\t\tif (isInverse) {\n\t\t\t\textension = extension.slice(1);\n\t\t\t}\n\t\t\tif (isInverse && fileExt === extension) { // !sass , sass === css\n\t\t\t\treturn false;\n\t\t\t} else if (!isInverse && fileExt !== extension) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif (typeof result === \"undefined\") {\n\t\tresult = true;\n\t}\n\treturn result;\n}\n\nfunction isUrl(s) {\n\tvar regexp = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\treturn regexp.test(s);\n}\n\nfunction getExtension(p) {\n\tp = String(p);\n\treturn p.substr(p.lastIndexOf(\".\") + 1);\n}"}